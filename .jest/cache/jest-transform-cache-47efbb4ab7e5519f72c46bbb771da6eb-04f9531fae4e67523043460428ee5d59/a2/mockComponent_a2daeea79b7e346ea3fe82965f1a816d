84c0c6aed170b1eb8455edb6693e74a3
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 */
'use strict';
module.exports = (moduleName, instanceMethods) => {
    const RealComponent = jest.requireActual(moduleName);
    const React = require('react');
    const SuperClass = typeof RealComponent === 'function' ? RealComponent : React.Component;
    const name = RealComponent.displayName ||
        RealComponent.name ||
        (RealComponent.render // handle React.forwardRef
            ? RealComponent.render.displayName || RealComponent.render.name
            : 'Unknown');
    const nameWithoutPrefix = name.replace(/^(RCT|RK)/, '');
    const Component = class extends SuperClass {
        static displayName = 'Component';
        render() {
            const props = Object.assign({}, RealComponent.defaultProps);
            if (this.props) {
                Object.keys(this.props).forEach(prop => {
                    // We can't just assign props on top of defaultProps
                    // because React treats undefined as special and different from null.
                    // If a prop is specified but set to undefined it is ignored and the
                    // default prop is used instead. If it is set to null, then the
                    // null value overwrites the default value.
                    if (this.props[prop] !== undefined) {
                        props[prop] = this.props[prop];
                    }
                });
            }
            return React.createElement(nameWithoutPrefix, props, this.props.children);
        }
    };
    Component.displayName = nameWithoutPrefix;
    Object.keys(RealComponent).forEach(classStatic => {
        Component[classStatic] = RealComponent[classStatic];
    });
    if (instanceMethods != null) {
        Object.assign(Component.prototype, instanceMethods);
    }
    return Component;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL21lZ2hhamFnZGFsZS9Eb2N1bWVudHMvVHlwZS9Bd2Vzb21lVFNQcm9qZWN0L25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvamVzdC9tb2NrQ29tcG9uZW50LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0dBT0c7QUFFSCxZQUFZLENBQUM7QUFFYixNQUFNLENBQUMsT0FBTyxHQUFHLENBQUMsVUFBVSxFQUFFLGVBQWUsRUFBRSxFQUFFO0lBQy9DLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDckQsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRS9CLE1BQU0sVUFBVSxHQUNkLE9BQU8sYUFBYSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDO0lBRXhFLE1BQU0sSUFBSSxHQUNSLGFBQWEsQ0FBQyxXQUFXO1FBQ3pCLGFBQWEsQ0FBQyxJQUFJO1FBQ2xCLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQywwQkFBMEI7WUFDOUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsV0FBVyxJQUFJLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSTtZQUMvRCxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFakIsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUV4RCxNQUFNLFNBQVMsR0FBRyxLQUFNLFNBQVEsVUFBVTtRQUN4QyxNQUFNLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUVqQyxNQUFNO1lBQ0osTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBRTVELElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7b0JBQ3JDLG9EQUFvRDtvQkFDcEQscUVBQXFFO29CQUNyRSxvRUFBb0U7b0JBQ3BFLCtEQUErRDtvQkFDL0QsMkNBQTJDO29CQUMzQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssU0FBUyxFQUFFO3dCQUNsQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztxQkFDaEM7Z0JBQ0gsQ0FBQyxDQUFDLENBQUM7YUFDSjtZQUVELE9BQU8sS0FBSyxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1RSxDQUFDO0tBQ0YsQ0FBQztJQUVGLFNBQVMsQ0FBQyxXQUFXLEdBQUcsaUJBQWlCLENBQUM7SUFFMUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUU7UUFDL0MsU0FBUyxDQUFDLFdBQVcsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN0RCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksZUFBZSxJQUFJLElBQUksRUFBRTtRQUMzQixNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsZUFBZSxDQUFDLENBQUM7S0FDckQ7SUFFRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL21lZ2hhamFnZGFsZS9Eb2N1bWVudHMvVHlwZS9Bd2Vzb21lVFNQcm9qZWN0L25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUvamVzdC9tb2NrQ29tcG9uZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChtb2R1bGVOYW1lLCBpbnN0YW5jZU1ldGhvZHMpID0+IHtcbiAgY29uc3QgUmVhbENvbXBvbmVudCA9IGplc3QucmVxdWlyZUFjdHVhbChtb2R1bGVOYW1lKTtcbiAgY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG4gIGNvbnN0IFN1cGVyQ2xhc3MgPVxuICAgIHR5cGVvZiBSZWFsQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nID8gUmVhbENvbXBvbmVudCA6IFJlYWN0LkNvbXBvbmVudDtcblxuICBjb25zdCBuYW1lID1cbiAgICBSZWFsQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8XG4gICAgUmVhbENvbXBvbmVudC5uYW1lIHx8XG4gICAgKFJlYWxDb21wb25lbnQucmVuZGVyIC8vIGhhbmRsZSBSZWFjdC5mb3J3YXJkUmVmXG4gICAgICA/IFJlYWxDb21wb25lbnQucmVuZGVyLmRpc3BsYXlOYW1lIHx8IFJlYWxDb21wb25lbnQucmVuZGVyLm5hbWVcbiAgICAgIDogJ1Vua25vd24nKTtcblxuICBjb25zdCBuYW1lV2l0aG91dFByZWZpeCA9IG5hbWUucmVwbGFjZSgvXihSQ1R8UkspLywgJycpO1xuXG4gIGNvbnN0IENvbXBvbmVudCA9IGNsYXNzIGV4dGVuZHMgU3VwZXJDbGFzcyB7XG4gICAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ0NvbXBvbmVudCc7XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICBjb25zdCBwcm9wcyA9IE9iamVjdC5hc3NpZ24oe30sIFJlYWxDb21wb25lbnQuZGVmYXVsdFByb3BzKTtcblxuICAgICAgaWYgKHRoaXMucHJvcHMpIHtcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5wcm9wcykuZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgICAvLyBXZSBjYW4ndCBqdXN0IGFzc2lnbiBwcm9wcyBvbiB0b3Agb2YgZGVmYXVsdFByb3BzXG4gICAgICAgICAgLy8gYmVjYXVzZSBSZWFjdCB0cmVhdHMgdW5kZWZpbmVkIGFzIHNwZWNpYWwgYW5kIGRpZmZlcmVudCBmcm9tIG51bGwuXG4gICAgICAgICAgLy8gSWYgYSBwcm9wIGlzIHNwZWNpZmllZCBidXQgc2V0IHRvIHVuZGVmaW5lZCBpdCBpcyBpZ25vcmVkIGFuZCB0aGVcbiAgICAgICAgICAvLyBkZWZhdWx0IHByb3AgaXMgdXNlZCBpbnN0ZWFkLiBJZiBpdCBpcyBzZXQgdG8gbnVsbCwgdGhlbiB0aGVcbiAgICAgICAgICAvLyBudWxsIHZhbHVlIG92ZXJ3cml0ZXMgdGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICAgICAgaWYgKHRoaXMucHJvcHNbcHJvcF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcHJvcHNbcHJvcF0gPSB0aGlzLnByb3BzW3Byb3BdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KG5hbWVXaXRob3V0UHJlZml4LCBwcm9wcywgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgfVxuICB9O1xuXG4gIENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IG5hbWVXaXRob3V0UHJlZml4O1xuXG4gIE9iamVjdC5rZXlzKFJlYWxDb21wb25lbnQpLmZvckVhY2goY2xhc3NTdGF0aWMgPT4ge1xuICAgIENvbXBvbmVudFtjbGFzc1N0YXRpY10gPSBSZWFsQ29tcG9uZW50W2NsYXNzU3RhdGljXTtcbiAgfSk7XG5cbiAgaWYgKGluc3RhbmNlTWV0aG9kcyAhPSBudWxsKSB7XG4gICAgT2JqZWN0LmFzc2lnbihDb21wb25lbnQucHJvdG90eXBlLCBpbnN0YW5jZU1ldGhvZHMpO1xuICB9XG5cbiAgcmV0dXJuIENvbXBvbmVudDtcbn07XG4iXSwidmVyc2lvbiI6M30=